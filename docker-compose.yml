version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ./backend
      target: development
    container_name: twentyonepilots-backend
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGO_URI=mongodb://mongodb:27017/twentyonepilots_dev
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_NODE=http://elasticsearch:9200
      - JWT_SECRET=dev_jwt_secret_key
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - mongodb
      - redis
      - elasticsearch
    networks:
      - twentyonepilots
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require(\"http\").get(\"http://0.0.0.0:5000/health\", (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on(\"error\", () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      target: development
    container_name: twentyonepilots-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - twentyonepilots
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require(\"http\").get(\"http://0.0.0.0:3000\", (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on(\"error\", () => process.exit(1))"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: twentyonepilots-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=twentyonepilots_dev
    volumes:
      - mongodb_data:/data/db
      - ./backend/seed.js:/docker-entrypoint-initdb.d/seed.js:ro
    networks:
      - twentyonepilots
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: twentyonepilots-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - twentyonepilots
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Elasticsearch for search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: twentyonepilots-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=changeme
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - twentyonepilots
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kibana for Elasticsearch monitoring (optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: twentyonepilots-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - twentyonepilots
    restart: unless-stopped
    profiles:
      - monitoring

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: twentyonepilots-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.listen-address=0.0.0.0:9090'
    environment:
      - TZ=UTC
    networks:
      - twentyonepilots
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - monitoring

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: twentyonepilots-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST:-smtp.gmail.com:587}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASS}
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3001}
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_SECURITY_COOKIE_SAMESITE=lax
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - twentyonepilots
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - monitoring

  # Alertmanager for alert notifications
  alertmanager:
    image: prom/alertmanager:latest
    container_name: twentyonepilots-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.listen-address=0.0.0.0:9093'
      - '--cluster.listen-address='
    environment:
      - TZ=UTC
    depends_on:
      - prometheus
    networks:
      - twentyonepilots
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - monitoring

  # Prometheus Pushgateway for E2E metrics
  pushgateway:
    image: prom/pushgateway:latest
    container_name: twentyonepilots-pushgateway
    ports:
      - "9091:9091"
    command:
      - '--web.listen-address=0.0.0.0:9091'
      - '--web.telemetry-path=/metrics'
    environment:
      - TZ=UTC
    networks:
      - twentyonepilots
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9091/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - monitoring

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: twentyonepilots-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - twentyonepilots
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - production

volumes:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  nginx_logs:

networks:
  twentyonepilots:
    driver: bridge