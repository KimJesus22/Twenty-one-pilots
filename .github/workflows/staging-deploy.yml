name: Staging Deployment

on:
  push:
    branches: [ develop, staging ]
  pull_request:
    branches: [ develop, staging ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ github.repository }}/backend
  FRONTEND_IMAGE: ${{ github.repository }}/frontend

jobs:
  # Tests and Quality Checks
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: Run backend tests
      working-directory: ./backend
      run: npm run test:coverage
      env:
        NODE_ENV: test
        MONGO_URI: mongodb://localhost:27017/twentyonepilots_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test_jwt_secret

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: Backend Coverage
      if: success()

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: Frontend Coverage
      if: success()

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit
      working-directory: ./backend
      run: npm audit --audit-level=moderate || true

    - name: Run npm audit frontend
      working-directory: ./frontend
      run: npm audit --audit-level=moderate || true

  # Build and Push Images
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, security]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=staging

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=staging

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to staging server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << EOF
          cd /opt/twentyonepilots
          git pull origin develop
          docker-compose pull
          docker-compose up -d --build
          docker-compose ps
        EOF

    - name: Wait for staging deployment
      run: |
        echo "Waiting for staging services to be healthy..."
        timeout 300 bash -c '
        until curl -f http://staging.yourdomain.com/health; do
          echo "Waiting for staging health check..."
          sleep 10
        done
        echo "Staging deployment successful!"
        ' || exit 1

    - name: Run E2E tests on staging
      working-directory: ./frontend
      run: |
        npm run test:e2e
      env:
        BASE_URL: http://staging.yourdomain.com

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: "✅ Staging deployment successful - ${{ github.sha }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: "❌ Staging deployment failed - ${{ github.sha }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback on failure
  rollback-staging:
    name: Rollback Staging
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: failure() && needs.deploy-staging.result == 'failure'

    steps:
    - name: Configure SSH for rollback
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

    - name: Rollback staging deployment
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << EOF
          cd /opt/twentyonepilots
          echo "Rolling back to previous version..."
          docker-compose down
          git reset --hard HEAD~1
          docker-compose up -d --build
          echo "Rollback completed"
        EOF

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: warning
        text: "🔄 Staging rollback completed - ${{ github.sha }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}