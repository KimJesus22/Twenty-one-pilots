name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongodb:
        image: mongo:7-jammy
        ports:
          - 27017:27017

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      run: cd backend && npm ci

    - name: Run backend linting
      run: cd backend && npm run lint

    - name: Run backend tests
      run: cd backend && npm test
      env:
        NODE_ENV: test
        REDIS_URL: redis://localhost:6379
        MONGODB_URI: mongodb://localhost:27017/twentyonepilots_test

    - name: Generate backend coverage report
      run: cd backend && npm run test:coverage

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/coverage
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: cd frontend && npm ci

    - name: Run frontend linting
      run: cd frontend && npm run lint

    - name: Run frontend tests
      run: cd frontend && npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Build frontend
      run: cd frontend && npm run build

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push backend image
      run: |
        cd backend
        docker build -t twentyonepilots-backend:${{ github.sha }} .
        docker tag twentyonepilots-backend:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/twentyonepilots-backend:staging
        docker push ${{ secrets.ECR_REGISTRY }}/twentyonepilots-backend:staging

    - name: Build and push frontend image
      run: |
        cd frontend
        docker build -t twentyonepilots-frontend:${{ github.sha }} .
        docker tag twentyonepilots-frontend:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/twentyonepilots-frontend:staging
        docker push ${{ secrets.ECR_REGISTRY }}/twentyonepilots-frontend:staging

    - name: Deploy to staging
      run: |
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER_STAGING }} \
          --service ${{ secrets.ECS_SERVICE_STAGING }} \
          --force-new-deployment \
          --region us-east-1

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push backend image
      run: |
        cd backend
        docker build -t twentyonepilots-backend:${{ github.sha }} .
        docker tag twentyonepilots-backend:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/twentyonepilots-backend:latest
        docker push ${{ secrets.ECR_REGISTRY }}/twentyonepilots-backend:latest

    - name: Build and push frontend image
      run: |
        cd frontend
        docker build -t twentyonepilots-frontend:${{ github.sha }} .
        docker tag twentyonepilots-frontend:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/twentyonepilots-frontend:latest
        docker push ${{ secrets.ECR_REGISTRY }}/twentyonepilots-frontend:latest

    - name: Deploy to production
      run: |
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER_PRODUCTION }} \
          --service ${{ secrets.ECS_SERVICE_PRODUCTION }} \
          --force-new-deployment \
          --region us-east-1

    - name: Create GitHub release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## ðŸš€ Deployed to Production

          ### Changes
          - Backend and frontend deployed successfully
          - All tests passed
          - Security scan completed

          ### Commit: ${{ github.sha }}
          ### Build: ${{ github.run_number }}
        draft: false
        prerelease: false