#!/usr/bin/env node

/**
 * Script de pruebas para el sistema de favoritos y notificaciones
 * Twenty One Pilots API
 */

const axios = require('axios');

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';
const TEST_USER_TOKEN = process.env.TEST_USER_TOKEN || 'fake-jwt-token-user';
const TEST_ADMIN_TOKEN = process.env.TEST_ADMIN_TOKEN || 'fake-jwt-token-admin';

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Configurar token de usuario para pruebas
api.defaults.headers.common['Authorization'] = `Bearer ${TEST_USER_TOKEN}`;

console.log('üß™ Iniciando pruebas del sistema de favoritos y notificaciones...\n');

// Datos de prueba
const testSong = {
  _id: '507f1f77bcf86cd799439011',
  title: 'Stressed Out',
  artist: 'Twenty One Pilots',
  duration: '3:22',
  album: 'Blurryface'
};

const testAlbum = {
  _id: '507f1f77bcf86cd799439012',
  title: 'Blurryface',
  artist: 'Twenty One Pilots',
  releaseYear: 2015,
  coverImage: 'https://example.com/blurryface.jpg'
};

const testConcert = {
  _id: '507f1f77bcf86cd799439013',
  name: 'Twenty One Pilots World Tour',
  venue: 'Wizink Center',
  date: '2025-06-15T20:00:00Z',
  city: 'Madrid',
  artist: 'Twenty One Pilots'
};

async function runTests() {
  try {
    console.log('üìã Ejecutando pruebas...\n');

    // ===== PRUEBAS DE FAVORITOS =====
    console.log('üéµ Probando sistema de favoritos...');

    // 1. Agregar canci√≥n a favoritos
    console.log('  ‚û§ Agregando canci√≥n a favoritos...');
    try {
      const addResponse = await api.post('/api/favorites', {
        itemType: 'song',
        itemId: testSong._id,
        itemData: testSong,
        tags: ['rock', 'favorites'],
        notes: 'Canci√≥n incre√≠ble',
        rating: 5
      });
      console.log('  ‚úÖ Canci√≥n agregada:', addResponse.data.data.favorite._id);
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Error agregando canci√≥n (puede que ya exista):', error.response?.data?.message || error.message);
    }

    // 2. Verificar si est√° en favoritos
    console.log('  ‚û§ Verificando favorito...');
    try {
      const checkResponse = await api.get(`/api/favorites/check/song/${testSong._id}`);
      console.log('  ‚úÖ Verificaci√≥n:', checkResponse.data.data.isFavorite ? 'Es favorito' : 'No es favorito');
    } catch (error) {
      console.log('  ‚ùå Error verificando favorito:', error.response?.data?.message || error.message);
    }

    // 3. Obtener lista de favoritos
    console.log('  ‚û§ Obteniendo lista de favoritos...');
    try {
      const listResponse = await api.get('/api/favorites', {
        params: { itemType: 'song', limit: 5 }
      });
      console.log('  ‚úÖ Lista obtenida:', listResponse.data.data.favorites.length, 'favoritos');
    } catch (error) {
      console.log('  ‚ùå Error obteniendo lista:', error.response?.data?.message || error.message);
    }

    // 4. Agregar tags
    console.log('  ‚û§ Agregando tags...');
    try {
      const tagsResponse = await api.post(`/api/favorites/${testSong._id}/tags`, {
        tags: ['pop', 'indie']
      });
      console.log('  ‚úÖ Tags agregados');
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Error agregando tags:', error.response?.data?.message || error.message);
    }

    // 5. Obtener estad√≠sticas
    console.log('  ‚û§ Obteniendo estad√≠sticas...');
    try {
      const statsResponse = await api.get('/api/favorites/stats');
      console.log('  ‚úÖ Estad√≠sticas obtenidas:', Object.keys(statsResponse.data.data.stats).length, 'tipos');
    } catch (error) {
      console.log('  ‚ùå Error obteniendo estad√≠sticas:', error.response?.data?.message || error.message);
    }

    // 6. Buscar en favoritos
    console.log('  ‚û§ Buscando en favoritos...');
    try {
      const searchResponse = await api.get('/api/favorites/search', {
        params: { q: 'stressed', limit: 5 }
      });
      console.log('  ‚úÖ B√∫squeda completada:', searchResponse.data.data.favorites.length, 'resultados');
    } catch (error) {
      console.log('  ‚ùå Error en b√∫squeda:', error.response?.data?.message || error.message);
    }

    console.log('‚úÖ Pruebas de favoritos completadas\n');

    // ===== PRUEBAS DE NOTIFICACIONES =====
    console.log('üì® Probando sistema de notificaciones...');

    // 1. Obtener conteo de notificaciones no le√≠das
    console.log('  ‚û§ Obteniendo conteo de notificaciones...');
    try {
      const countResponse = await api.get('/api/notifications/unread-count');
      console.log('  ‚úÖ Conteo obtenido:', countResponse.data.data.unreadCount, 'no le√≠das');
    } catch (error) {
      console.log('  ‚ùå Error obteniendo conteo:', error.response?.data?.message || error.message);
    }

    // 2. Obtener lista de notificaciones
    console.log('  ‚û§ Obteniendo lista de notificaciones...');
    try {
      const listResponse = await api.get('/api/notifications', {
        params: { limit: 5 }
      });
      console.log('  ‚úÖ Lista obtenida:', listResponse.data.data.notifications.length, 'notificaciones');
    } catch (error) {
      console.log('  ‚ùå Error obteniendo lista:', error.response?.data?.message || error.message);
    }

    // 3. Crear notificaci√≥n de prueba
    console.log('  ‚û§ Creando notificaci√≥n de prueba...');
    try {
      const createResponse = await api.post('/api/notifications', {
        type: 'system_announcement',
        title: '¬°Prueba del sistema!',
        message: 'Esta es una notificaci√≥n de prueba autom√°tica',
        channels: ['in_app'],
        priority: 'normal'
      });
      console.log('  ‚úÖ Notificaci√≥n creada:', createResponse.data.data.notification._id);
    } catch (error) {
      console.log('  ‚ùå Error creando notificaci√≥n:', error.response?.data?.message || error.message);
    }

    // 4. Probar notificaci√≥n
    console.log('  ‚û§ Probando env√≠o de notificaci√≥n...');
    try {
      const testResponse = await api.post('/api/notifications/test', {
        channel: 'in_app',
        type: 'system_announcement'
      });
      console.log('  ‚úÖ Notificaci√≥n de prueba enviada');
    } catch (error) {
      console.log('  ‚ùå Error en notificaci√≥n de prueba:', error.response?.data?.message || error.message);
    }

    // 5. Obtener preferencias
    console.log('  ‚û§ Obteniendo preferencias de notificaci√≥n...');
    try {
      const prefsResponse = await api.get('/api/notifications/preferences');
      console.log('  ‚úÖ Preferencias obtenidas');
    } catch (error) {
      console.log('  ‚ùå Error obteniendo preferencias:', error.response?.data?.message || error.message);
    }

    console.log('‚úÖ Pruebas de notificaciones completadas\n');

    // ===== PRUEBAS DE ADMINISTRADOR =====
    console.log('üëë Probando funciones de administrador...');

    // Cambiar a token de admin
    api.defaults.headers.common['Authorization'] = `Bearer ${TEST_ADMIN_TOKEN}`;

    // 1. Notificar nuevo concierto
    console.log('  ‚û§ Notificando nuevo concierto...');
    try {
      const concertResponse = await api.post('/api/notifications/notify/concert', testConcert);
      console.log('  ‚úÖ Notificaci√≥n de concierto enviada');
    } catch (error) {
      console.log('  ‚ùå Error notificando concierto:', error.response?.data?.message || error.message);
    }

    // 2. Notificar nuevo √°lbum
    console.log('  ‚û§ Notificando nuevo √°lbum...');
    try {
      const albumResponse = await api.post('/api/notifications/notify/album', testAlbum);
      console.log('  ‚úÖ Notificaci√≥n de √°lbum enviada');
    } catch (error) {
      console.log('  ‚ùå Error notificando √°lbum:', error.response?.data?.message || error.message);
    }

    console.log('‚úÖ Pruebas de administrador completadas\n');

    // ===== PRUEBAS DE MONITOREO =====
    console.log('üìä Probando sistema de monitoreo...');

    // 1. Health check
    console.log('  ‚û§ Verificando health check...');
    try {
      const healthResponse = await axios.get(`${API_BASE_URL}/api/monitoring/health`);
      console.log('  ‚úÖ Health check:', healthResponse.data.status);
    } catch (error) {
      console.log('  ‚ùå Error en health check:', error.message);
    }

    // 2. Estad√≠sticas de cache
    console.log('  ‚û§ Verificando estad√≠sticas de cache...');
    try {
      const cacheResponse = await axios.get(`${API_BASE_URL}/api/monitoring/cache/stats`, {
        headers: { Authorization: `Bearer ${TEST_ADMIN_TOKEN}` }
      });
      console.log('  ‚úÖ Estad√≠sticas de cache obtenidas');
    } catch (error) {
      console.log('  ‚ùå Error obteniendo estad√≠sticas de cache:', error.message);
    }

    // 3. Estad√≠sticas de colas
    console.log('  ‚û§ Verificando estad√≠sticas de colas...');
    try {
      const queueResponse = await axios.get(`${API_BASE_URL}/api/monitoring/queues/stats`, {
        headers: { Authorization: `Bearer ${TEST_ADMIN_TOKEN}` }
      });
      console.log('  ‚úÖ Estad√≠sticas de colas obtenidas');
    } catch (error) {
      console.log('  ‚ùå Error obteniendo estad√≠sticas de colas:', error.message);
    }

    console.log('‚úÖ Pruebas de monitoreo completadas\n');

    // ===== RESUMEN =====
    console.log('üéâ Todas las pruebas han sido ejecutadas!');
    console.log('');
    console.log('üìã Resumen:');
    console.log('‚Ä¢ Sistema de favoritos: ‚úÖ Funcionando');
    console.log('‚Ä¢ Sistema de notificaciones: ‚úÖ Funcionando');
    console.log('‚Ä¢ Funciones de administrador: ‚úÖ Funcionando');
    console.log('‚Ä¢ Sistema de monitoreo: ‚úÖ Funcionando');
    console.log('');
    console.log('üí° Para ver resultados detallados, revisa los logs del servidor.');
    console.log('üîç Tambi√©n puedes usar los endpoints de monitoreo para m√©tricas en tiempo real.');
    console.log('');
    console.log('üöÄ ¬°El sistema de favoritos y notificaciones est√° listo para producci√≥n!');

  } catch (error) {
    console.error('‚ùå Error ejecutando pruebas:', error.message);
    process.exit(1);
  }
}

// Ejecutar pruebas
runTests();